<?php

namespace DoctrineORMModule\Proxy\__CG__\Equipment\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class EquipmentTaxonomy extends \Equipment\Entity\EquipmentTaxonomy implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'application', 'equipmentTaxonomyId', 'parent', 'parentId', 'level', 'featuredImage', 'equipment', '' . "\0" . 'Equipment\\Entity\\EquipmentTaxonomy' . "\0" . 'controlTemplate', 'competenceAreaTaxonomy', 'templateType', 'type', 'name', 'slug', 'description', 'order', 'status'];
        }

        return ['__isInitialized__', 'application', 'equipmentTaxonomyId', 'parent', 'parentId', 'level', 'featuredImage', 'equipment', '' . "\0" . 'Equipment\\Entity\\EquipmentTaxonomy' . "\0" . 'controlTemplate', 'competenceAreaTaxonomy', 'templateType', 'type', 'name', 'slug', 'description', 'order', 'status'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (EquipmentTaxonomy $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getEquipmentTaxonomyId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getEquipmentTaxonomyId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEquipmentTaxonomyId', []);

        return parent::getEquipmentTaxonomyId();
    }

    /**
     * {@inheritDoc}
     */
    public function setEquipmentTaxonomyId($equipmentTaxonomyId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEquipmentTaxonomyId', [$equipmentTaxonomyId]);

        return parent::setEquipmentTaxonomyId($equipmentTaxonomyId);
    }

    /**
     * {@inheritDoc}
     */
    public function addEquipment(\Equipment\Entity\Equipment $equipment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEquipment', [$equipment]);

        return parent::addEquipment($equipment);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEquipment(\Equipment\Entity\Equipment $equipment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEquipment', [$equipment]);

        return parent::removeEquipment($equipment);
    }

    /**
     * {@inheritDoc}
     */
    public function getEquipment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEquipment', []);

        return parent::getEquipment();
    }

    /**
     * {@inheritDoc}
     */
    public function getActiveEquipments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActiveEquipments', []);

        return parent::getActiveEquipments();
    }

    /**
     * {@inheritDoc}
     */
    public function getFeaturedImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFeaturedImage', []);

        return parent::getFeaturedImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setFeaturedImage($featuredImage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFeaturedImage', [$featuredImage]);

        return parent::setFeaturedImage($featuredImage);
    }

    /**
     * {@inheritDoc}
     */
    public function getControlTemplate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getControlTemplate', []);

        return parent::getControlTemplate();
    }

    /**
     * {@inheritDoc}
     */
    public function setControlTemplate($controlTemplate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setControlTemplate', [$controlTemplate]);

        return parent::setControlTemplate($controlTemplate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompetenceAreaTaxonomy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompetenceAreaTaxonomy', []);

        return parent::getCompetenceAreaTaxonomy();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompetenceAreaTaxonomy($competenceAreaTaxonomy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompetenceAreaTaxonomy', [$competenceAreaTaxonomy]);

        return parent::setCompetenceAreaTaxonomy($competenceAreaTaxonomy);
    }

    /**
     * {@inheritDoc}
     */
    public function setParent($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getParentId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentId', []);

        return parent::getParentId();
    }

    /**
     * {@inheritDoc}
     */
    public function getLevel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLevel', []);

        return parent::getLevel();
    }

    /**
     * {@inheritDoc}
     */
    public function setLevel($level = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLevel', [$level]);

        return parent::setLevel($level);
    }

    /**
     * {@inheritDoc}
     */
    public function getTemplateType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTemplateType', []);

        return parent::getTemplateType();
    }

    /**
     * {@inheritDoc}
     */
    public function getClosestTemplateType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClosestTemplateType', []);

        return parent::getClosestTemplateType();
    }

    /**
     * {@inheritDoc}
     */
    public function setTemplateType($templateType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTemplateType', [$templateType]);

        return parent::setTemplateType($templateType);
    }

    /**
     * {@inheritDoc}
     */
    public function getApplication()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApplication', []);

        return parent::getApplication();
    }

    /**
     * {@inheritDoc}
     */
    public function setApplication($application)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setApplication', [$application]);

        return parent::setApplication($application);
    }

    /**
     * {@inheritDoc}
     */
    public function setActiveStatus($activeStatus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActiveStatus', [$activeStatus]);

        return parent::setActiveStatus($activeStatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getActiveStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActiveStatus', []);

        return parent::getActiveStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', [$slug]);

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', []);

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrder($order)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrder', [$order]);

        return parent::setOrder($order);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrder', []);

        return parent::getOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function __call($name, $arguments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', [$name, $arguments]);

        return parent::__call($name, $arguments);
    }

}
